diff --git a/node_modules/@strapi/client/dist/client.d.ts b/node_modules/@strapi/client/dist/client.d.ts
index dcd481b..d50e0fc 100644
--- a/node_modules/@strapi/client/dist/client.d.ts
+++ b/node_modules/@strapi/client/dist/client.d.ts
@@ -1,3 +1,4 @@
+import type { Schema, UID, Utils } from '@strapi/strapi';
 import { CollectionTypeManager, SingleTypeManager } from './content-types';
 import { FilesManager } from './files';
 import type { ContentTypeManagerOptions } from './content-types/abstract';
@@ -142,7 +143,7 @@ export declare class StrapiClient {
      * @see CollectionTypeManager
      * @see StrapiClient
      */
-    collection(resource: string, options?: ClientCollectionOptions): CollectionTypeManager;
+    collection<Resource extends Schema.ContentTypes[keyof Schema.ContentTypes]['info']['pluralName']>(resource: Resource, options?: ClientCollectionOptions): CollectionTypeManager<Utils.Object.KeysBy<Schema.ContentTypes, { info: { pluralName: Resource } }>>;
     /**
      * Returns a {@link SingleTypeManager} instance to interact with the specified single-type routes in the Strapi app.
      *
@@ -179,7 +180,7 @@ export declare class StrapiClient {
      * @see SingleTypeManager
      * @see StrapiClient
      */
-    single(resource: string, options?: SingleCollectionOptions): SingleTypeManager;
+    single<Resource extends Schema.ContentTypes[keyof Schema.ContentTypes]['info']['singularName']>(resource: Resource, options?: SingleCollectionOptions): SingleTypeManager<Utils.Object.KeysBy<Schema.ContentTypes, { info: { singularName: Resource } }>>;
 }
 export type ClientCollectionOptions = Pick<ContentTypeManagerOptions, 'path'>;
 export type SingleCollectionOptions = Pick<ContentTypeManagerOptions, 'path'>;
diff --git a/node_modules/@strapi/client/dist/content-types/collection/manager.d.ts b/node_modules/@strapi/client/dist/content-types/collection/manager.d.ts
index 9d051c9..8f1a7a0 100644
--- a/node_modules/@strapi/client/dist/content-types/collection/manager.d.ts
+++ b/node_modules/@strapi/client/dist/content-types/collection/manager.d.ts
@@ -1,3 +1,4 @@
+import type { Data, UID, Utils } from '@strapi/strapi';
 import { HttpClient } from '../../http';
 import { AbstractContentTypeManager } from '../abstract';
 import type * as API from '../../types/content-api';
@@ -12,7 +13,7 @@ import type { ContentTypeManagerOptions } from '../abstract';
  * - All operations use the resource's plural name to construct the API endpoint.
  * - It also supports optional query parameters for filtering, sorting, pagination, etc.
  */
-export declare class CollectionTypeManager extends AbstractContentTypeManager {
+export declare class CollectionTypeManager<TContentTypeUID extends UID.ContentType> extends AbstractContentTypeManager {
     /**
      * Creates an instance of {@link CollectionTypeManager}`.
      *
@@ -47,7 +48,7 @@ export declare class CollectionTypeManager extends AbstractContentTypeManager {
      * console.log(articles);
      * ```
      */
-    find(queryParams?: API.BaseQueryParams): Promise<API.DocumentResponseCollection>;
+    find(queryParams?: API.BaseQueryParams<Data.ContentType<TContentTypeUID>>): Promise<API.DocumentResponseCollection<Data.ContentType<TContentTypeUID>>>;
     /**
      * Retrieves a single document by its ID.
      *
@@ -70,7 +71,7 @@ export declare class CollectionTypeManager extends AbstractContentTypeManager {
      * ```
      *
      */
-    findOne(documentID: string, queryParams?: API.BaseQueryParams): Promise<API.DocumentResponse>;
+    findOne(documentID: string, queryParams?: API.BaseQueryParams<Data.ContentType<TContentTypeUID>>): Promise<API.DocumentResponse<Data.ContentType<TContentTypeUID>>>;
     /**
      * Creates a new document.
      *
@@ -89,7 +90,7 @@ export declare class CollectionTypeManager extends AbstractContentTypeManager {
      * const newArticle = await articlesManager.create({ title: 'My New Article', content: '...' });
      * ```
      */
-    create(data: Record<string, any>, queryParams?: API.BaseQueryParams): Promise<API.DocumentResponse>;
+    create(data: Utils.Object.DeepPartial<Data.ContentType<TContentTypeUID>>, queryParams?: API.BaseQueryParams<Data.ContentType<TContentTypeUID>>): Promise<API.DocumentResponse<Data.ContentType<TContentTypeUID>>>;
     /**
      * Updates an existing document
      *
@@ -116,7 +117,7 @@ export declare class CollectionTypeManager extends AbstractContentTypeManager {
      * );
      * ```
      */
-    update(documentID: string, data: Record<string, unknown>, queryParams?: API.BaseQueryParams): Promise<API.DocumentResponse>;
+    update(documentID: string, data: Utils.Object.DeepPartial<Data.ContentType<TContentTypeUID>>, queryParams?: API.BaseQueryParams<Data.ContentType<TContentTypeUID>>): Promise<API.DocumentResponse<Data.ContentType<TContentTypeUID>>>;
     /**
      * Deletes a document
      *
@@ -140,5 +141,5 @@ export declare class CollectionTypeManager extends AbstractContentTypeManager {
      * );
      * ```
      */
-    delete(documentID: string, queryParams?: API.BaseQueryParams): Promise<void>;
+    delete(documentID: string, queryParams?: API.BaseQueryParams<Data.ContentType<TContentTypeUID>>): Promise<void>;
 }
diff --git a/node_modules/@strapi/client/dist/content-types/single/manager.d.ts b/node_modules/@strapi/client/dist/content-types/single/manager.d.ts
index 4701917..711e51e 100644
--- a/node_modules/@strapi/client/dist/content-types/single/manager.d.ts
+++ b/node_modules/@strapi/client/dist/content-types/single/manager.d.ts
@@ -1,3 +1,4 @@
+import type { Data, UID, Utils } from '@strapi/strapi';
 import { HttpClient } from '../../http';
 import { AbstractContentTypeManager } from '../abstract';
 import type * as API from '../../types/content-api';
@@ -12,7 +13,7 @@ import type { ContentTypeManagerOptions } from '../abstract';
  * - All operations use the resource's singular name to construct the API endpoint.
  * - It also supports optional query parameters for filtering, sorting, pagination, etc.
  */
-export declare class SingleTypeManager extends AbstractContentTypeManager {
+export declare class SingleTypeManager<TContentTypeUID extends UID.ContentType> extends AbstractContentTypeManager {
     /**
      * Creates an instance of {@link SingleTypeManager}.
      *
@@ -47,7 +48,7 @@ export declare class SingleTypeManager extends AbstractContentTypeManager {
      * const localizedHomepage = await homepageManager.find({ locale: 'es' });
      * ```
      */
-    find(queryParams?: API.BaseQueryParams): Promise<API.DocumentResponse>;
+    find(queryParams?: API.BaseQueryParams<Data.ContentType<TContentTypeUID>>): Promise<API.DocumentResponse<Data.ContentType<TContentTypeUID>>>;
     /**
      * Updates the document of the specified single-type resource with the provided data.
      *
@@ -73,7 +74,7 @@ export declare class SingleTypeManager extends AbstractContentTypeManager {
      * );
      * ```
      */
-    update(data: Record<string, any>, queryParams?: API.BaseQueryParams): Promise<API.DocumentResponse>;
+    update(data: Utils.Object.DeepPartial<Data.ContentType<TContentTypeUID>>, queryParams?: API.BaseQueryParams<Data.ContentType<TContentTypeUID>>): Promise<API.DocumentResponse<Data.ContentType<TContentTypeUID>>>;
     /**
      * Deletes the document of the specified single-type resource.
      *
@@ -98,5 +99,5 @@ export declare class SingleTypeManager extends AbstractContentTypeManager {
      * @see HttpClient
      * @see URLHelper.appendQueryParams
      */
-    delete(queryParams?: API.BaseQueryParams): Promise<void>;
+    delete(queryParams?: API.BaseQueryParams<Data.ContentType<TContentTypeUID>>): Promise<void>;
 }
diff --git a/node_modules/@strapi/client/dist/types/content-api.d.ts b/node_modules/@strapi/client/dist/types/content-api.d.ts
index 0b32d81..2a7e1db 100644
--- a/node_modules/@strapi/client/dist/types/content-api.d.ts
+++ b/node_modules/@strapi/client/dist/types/content-api.d.ts
@@ -1,7 +1,5 @@
 export interface Document {
     documentId: string;
-    createdAt: string;
-    updatedAt: string;
     [key: string]: any;
 }
 export interface Pagination {
@@ -21,6 +19,58 @@ export interface DocumentResponseCollection<T extends Document = Document> {
     data: T[];
     meta: ResponseMeta;
 }
+// Fields
+type IsEqual<A, B> = [A, B] extends [B, A] ? true : false;
+type UnionContains<T, U> = U extends any ? true extends IsEqual<T, U> ? true : false : never;
+type ObjectKeysDeep<T, Key extends string = '', Stack = never> = true extends UnionContains<T, Stack> ? never : Key | Fields<T, Key, Stack | T>;
+type Fields<T, Prefix extends string = '', Stack = never> = T extends readonly any[] ? ObjectKeysDeep<T[number] & {}, Prefix extends '' ? `${number}` : `${Prefix}.${number}`, Stack> : T extends Date ? never : T extends object ? { [K in keyof T]: K extends string | number ? ObjectKeysDeep<T[K] & {}, Prefix extends '' ? `${K}` : `${Prefix}.${K}`, Stack> : never }[keyof T] : never;
+// Filters
+type NullOperators = '$null' | '$notNull'
+type SingleValueOperators = '$eq' | '$eqi' | '$ne' | '$nei' | '$lt' | '$lte' | '$gt' | '$gte' | '$contains' | '$notContains' | '$containsi' | '$notContainsi' | '$startsWith' | '$startsWithi' | '$endsWith' | '$endsWithi' | '$not';
+type TwoValueOperators = '$in' | '$notIn';
+type MultipleValueOperators = '$between';
+type BinaryOperations<T> =
+    | T
+    | { $and: readonly T[] }
+    | { $or: readonly T[] }
+    | { $not: T };
+type ObjectUnion<Ops extends string, T> = Ops extends any ? { [Op in Ops]: T } : never;
+type Filters<T> = BinaryOperations<
+    [T] extends [readonly any[]] ? { [k: number]: Filters<T[number] & {}> }
+        : [T] extends [object] ? { [K in keyof T]?: Filters<T[K] & {}> }
+        :
+            | T
+            | ObjectUnion<NullOperators, true>
+            | ObjectUnion<SingleValueOperators, T>
+            | ObjectUnion<TwoValueOperators, readonly [T, T]>
+            | ObjectUnion<MultipleValueOperators, readonly T[]>
+>;
+// Sort
+type Sort<T extends string> = T | `${T}:asc` | `${T}:desc`;
+// Populate
+type ObjectKeyValuePairsDeep<T, Key extends string = '', Stack = never> = true extends UnionContains<T, Stack> ? never : [Key, T] | ObjectKeyValuesDeep<T, Key, Stack | T>;
+type ObjectKeyValuesDeep<T, Prefix extends string = '', Stack = never> = T extends readonly any[] ? ObjectKeyValuePairsDeep<T[number] & {}, Prefix extends '' ? `${number}` : `${Prefix}.${number}`, Stack> : T extends Date ? never : T extends object ? { [K in keyof T]: K extends string | number ? ObjectKeyValuePairsDeep<T[K] & {}, Prefix extends '' ? `${K}` : `${Prefix}.${K}`, Stack> : never }[keyof T] : never;
+type Populate<T extends [string, any]> = { [K in T[0]]?: T extends [K, infer V] ? SelectionParams<V extends readonly any[] ? V[number] : V> : never };
+interface SelectionParams<T> {
+    /**
+     * Specifies the fields of documents to include in the response.
+     *
+     * @note `documentId` and `id` fields are always present in a document, regardless of manually selected fields.
+     */
+    fields?: Fields<T>[];
+    /**
+     * Applies filters to the records based on field values.
+     */
+    filters?: Filters<T>;
+    /**
+     * Sort the results based on a specific order.
+     *
+     * Can be
+     * - a single string like `'field:asc'`
+     * - an array of strings for multiple sorting criteria.
+     */
+    sort?: Sort<Fields<T>> | Sort<Fields<T>>[];
+}
 /**
  * Defines the structure of query parameters supported for Strapi content API requests.
  *
@@ -58,7 +108,7 @@ export interface DocumentResponseCollection<T extends Document = Document> {
  *
  * @see {@link URLHelper.appendQueryParams} for how this type is serialized into query strings for API endpoints.
  */
-export interface BaseQueryParams {
+export interface BaseQueryParams<T extends Document = Document> extends SelectionParams<T> {
     /**
      * Specifies related fields or relations to return.
      *
@@ -67,17 +117,7 @@ export interface BaseQueryParams {
      * - an `array` of strings to specify multiple relation paths
      * - an `object` to enable deeper population configurations
      */
-    populate?: string | string[] | Record<string, unknown>;
-    /**
-     * Specifies the fields of documents to include in the response.
-     *
-     * @note `documentId` and `id` fields are always present in a document, regardless of manually selected fields.
-     */
-    fields?: string[];
-    /**
-     * Applies filters to the records based on field values.
-     */
-    filters?: Record<string, unknown>;
+    populate?: '*' | Fields<T> | Fields<T>[] | Populate<ObjectKeyValuesDeep<T> & {}>;
     /**
      * Specifies the locale of the content to fetch.
      *
@@ -94,14 +134,6 @@ export interface BaseQueryParams {
      * - `'published'`: fetches only published records.
      */
     status?: 'draft' | 'published';
-    /**
-     * Sort the results based on a specific order.
-     *
-     * Can be
-     * - a single string like `'field:asc'`
-     * - an array of strings for multiple sorting criteria.
-     */
-    sort?: string | string[];
     /**
      * Configures pagination options for requests.
      *
